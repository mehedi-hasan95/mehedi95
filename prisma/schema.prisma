// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  admin
  user
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String    @default("https://github.com/shadcn.png")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       userRole  @default(user)
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  twoFactorEnabled Boolean     @default(false)
  twofactors       TwoFactor[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Project {
  id             String      @id @default(cuid())
  title          String
  description    String
  keyChallenge   String?
  slug           String      @unique
  liveDemo       String
  githubLink     String
  technologyUsed String[]
  isFeatured     Boolean
  gallery        String[]
  featuredImage  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  challenge      Challenge[]
  keyFeature     String[]
  duration       Float
  subTitle       String?
  projectType    String
  developerRole  String

  @@index([slug])
}

model Challenge {
  id             String  @id @default(cuid())
  challenge      String
  description    String
  challengeTitle String
  projectId      String
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserInfo {
  id        String   @id @default(cuid())
  heading   String
  bio       String
  email     String
  phone     String
  location  String
  github    String?
  linkedin  String?
  twitter   String?
  fiverr    String?
  upwork    String?
  image     String?
  resume    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model AllSkill {
  id         String       @id @default(cuid())
  updatedAt  DateTime     @updatedAt
  createdAt  DateTime     @default(now())
  SkillItems SkillItems[]
}

model SkillItems {
  id       String   @id @default(uuid())
  title    String
  skills   String[]
  skilId   String
  allSkill AllSkill @relation(fields: [skilId], references: [id], onDelete: Cascade)
}
